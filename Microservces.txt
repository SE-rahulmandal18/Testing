-----------------------------------------------------------------------------------
Day 3
 
     ******** Spring Enviroment***************
    - application.properties file is stored in Enviroment obj


-Immutable - env obj

http://locahost:8080/actuator/env

Solution:
1)Restart your application (storeapp)
-spring.application.name=prodcut-service


Spring Cloud Bus
-http://locahost:8888/actuator/busrefresh

----------------------------------------------------------------------------------------
Day 4:

Setting up the Eureka Server:

1) Create a spring Boot Project(spring starter) : (storeApp-Eureka-Server)
add starter - Spring Cloud Eureka Server

2)In application.properties
    -server.port=8761
    -eureka.client.register-with-eureka=false
    -eureka.client.fetch-registry=false

3) Add @EnableEurekaServer on the application class

4)Start the application
http://localhost:8761

-----------------------------------------------------------------------------------------------
Two reponsibilities:
  -spring.applicaion.name=product-service

1)Spring cloud config/spring cloud bus
  - Property file name

2)Spring Cloud Eureka
  -Instacne (Service Provider) is registered with the name.(erviceId)


Dynamic Registration:

Service Provider:  (Service Instnce/Eureka client)

1)In pom.xml = storeapp
-Add Satrter - Eureka Discovery Client
       <dependency>
              <groupId>org.springframework.cloud</groupId>
	       <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
	</dependency>


2) In application.properties ,add
 
eureka.client.serviceUrl.defalutZone=http://locahst:8761/eureka
eureka.instance.prefer-ip-address=true

3)Add @@EnableDiscoveryClient on the application class

4) Ensure the RabbitMQ docker container(docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.12-management), 
   Config Server, Eureka sever and storeapp microservices is running

-----------------------------------------------------------------------------------------

Service Consumer:

http://product-service/products
http://product-service/products/1

-------------------------------------------------------------------------------------------

Spring MVC/Rest:
service to service call:
-RestTemplate (HTTP Client)
       -IP + Port

-----------------------------------------------------------------------------------------------
Rest temp wants 1 IP address but we getting 3
 -To rsolve the problem we hv pattern ->application infrastructure -client side discovery(pattern)








docker run -p 9411:9411 openzipkin/zipkin


docker run -p 9090:9090 -v C:\prometheus.yml prom/prometheus




















spring.datasource.url=jdbc:h2:mem:storeappdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

#Accessing the H2 Console
spring.h2.console.enabled=true

spring.h2.console.path=/h2-console
spring.h2.console.settings.trace=false
spring.h2.console.settings.web-allow-others=false

spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true

 Don't forget this property - ******
 spring.jpa.hibernate.ddl-auto=create-drop

 management.endpoints.web.exposure.include=*

 

# working with schema.sql & data.sql 
#spring.jpa.hibernate.ddl-auto=none

spring.sql.init.platform=h2
spring.sql.init.schema=classpath:db/schema-h2.sql
spring.sql.init.data=classpath:db/data-h2.sql



management.endpoint.env.show-values=ALWAYS





		bookRepository.save(new Book(null '.NET IL Assembler', 'PublisherE', '978-1-4302-6761-4', 492, 2014),
		bookRepository.save(new Book(null, '.NET Standard 2.0 Cookbook', 'PublisherF', '978-1-78883-466-7', 394, 2018),
	    bookRepository.save(new Book(null, '.NET Test Automation Recipes', 'PublisherG', '978-1-59059-663-0', 408, 2006),
	    bookRepository.save(new Book(null, '10 LED Projects for Geeks', 'PublisherH', '978-1-59327-825-0', 240, 2018),
	    bookRepository.save(new Book(null, '101 Design Ingredients to Solve Big Tech Problems', 'PublisherI', '978-1-93778-532-1', 298, 2013),
	    bookRepository.save(new Book(null, '101 Excel 2013 Tips, Tricks and Timesavers', 'PublisherJ', '978-1-118-64218-4', 312, 2013),
		bookRepository.save(new Book(null, '101 UX Principles', 'PublisherK', '978-1-78883-736-1', 414, 2018),
	    bookRepository.save(new Book(null, '101 Windows Phone 7 Apps', 'PublisherL', '978-0-672-33552-5', 1152, 2011),
	    bookRepository.save(new Book(null, '20 Easy Raspberry Pi Projects', 'PublisherM', '978-1-59327-843-4', 288, 2018),
	    bookRepository.save(new Book(null, '20 Recipes for Programming MVC3', 'PublisherN', '978-1-4493-0986-2', 122, 2011),
				(15, '20 Recipes for Programming PhoneGap', 'PublisherO', '978-1-4493-1954-0', 78, 2012),
				(16, '21 Recipes for Mining Twitter', 'PublisherP', '978-1-4493-0316-7', 72, 2011),
				(17, '21st Century C', 'PublisherQ', '978-1-4493-2714-9', 296, 2012),
				(18, '21st Century C, 2nd Edition', 'PublisherR', '978-1-49190-389-6', 408, 2014),
				(19, '21st Century Robot', 'PublisherS', '978-1-44933-821-3', 278, 2014),
				(20, '25 Recipes for Getting Started with R', 'PublisherT', '978-1-4493-0323-5', 50, 2011);
		


git commands
 1)Delete a folder from github 
        git rm -r foldername
        git commit -m "done"
        git push origin



