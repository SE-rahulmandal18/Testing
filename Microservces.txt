-----------------------------------------------------------------------------------
Day 3
 
     ******** Spring Enviroment***************
    - application.properties file is stored in Enviroment obj


-Immutable - env obj

http://locahost:8080/actuator/env

Solution:
1)Restart your application (storeapp)
-spring.application.name=prodcut-service


Spring Cloud Bus
-http://locahost:8888/actuator/busrefresh

----------------------------------------------------------------------------------------
Day 4:

Setting up the Eureka Server:

1) Create a spring Boot Project(spring starter) : (storeApp-Eureka-Server)
add starter - Spring Cloud Eureka Server

2)In application.properties
    -server.port=8761
    -eureka.client.register-with-eureka=false
    -eureka.client.fetch-registry=false

3) Add @EnableEurekaServer on the application class

4)Start the application
http://localhost:8761

-----------------------------------------------------------------------------------------------
Two reponsibilities:
  -spring.applicaion.name=product-service

1)Spring cloud config/spring cloud bus
  - Property file name

2)Spring Cloud Eureka
  -Instacne (Service Provider) is registered with the name.(erviceId)


Dynamic Registration:

Service Provider:  (Service Instnce/Eureka client)

1)In pom.xml = storeapp
-Add Satrter - Eureka Discovery Client
       <dependency>
              <groupId>org.springframework.cloud</groupId>
	       <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
	</dependency>


2) In application.properties ,add
 
eureka.client.serviceUrl.defalutZone=http://locahst:8761/eureka
eureka.instance.prefer-ip-address=true

3)Add @@EnableDiscoveryClient on the application class

4) Ensure the RabbitMQ docker container(docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.12-management), 
   Config Server, Eureka sever and storeapp microservices is running

-----------------------------------------------------------------------------------------

Service Consumer:

http://product-service/products
http://product-service/products/1

-------------------------------------------------------------------------------------------

Spring MVC/Rest:
service to service call:
-RestTemplate (HTTP Client)
       -IP + Port

-----------------------------------------------------------------------------------------------
Rest temp wants 1 IP address but we getting 3
 -To rsolve the problem we hv pattern ->application infrastructure -client side discovery(pattern)






-------------------------------------------------------------------------------------------------------------------------------------

docker run -p 9411:9411 openzipkin/zipkin


docker run -p 9090:9090 -v C:\prometheus.yml prom/prometheus


http://repo.spring.io/milestone/org/springframework/cloud/spring-cloud-dataflow-shell/1.3.0.M1/


--------------------------------------------------------------------------------------------------------------------------------------

spring.datasource.url=jdbc:h2:mem:storeappdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

#Accessing the H2 Console
spring.h2.console.enabled=true

spring.h2.console.path=/h2-console
spring.h2.console.settings.trace=false
spring.h2.console.settings.web-allow-others=false

spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true

 Don't forget this property - ******
 spring.jpa.hibernate.ddl-auto=create-drop

 management.endpoints.web.exposure.include=*

 

# working with schema.sql & data.sql 
#spring.jpa.hibernate.ddl-auto=none

spring.sql.init.platform=h2
spring.sql.init.schema=classpath:db/schema-h2.sql
spring.sql.init.data=classpath:db/data-h2.sql



management.endpoint.env.show-values=ALWAYS


---------------------------------------------------------------------------------------------------------------------------------------


		bookRepository.save(new Book(null '.NET IL Assembler', 'PublisherE', '978-1-4302-6761-4', 492, 2014),
		bookRepository.save(new Book(null, '.NET Standard 2.0 Cookbook', 'PublisherF', '978-1-78883-466-7', 394, 2018),
	    bookRepository.save(new Book(null, '.NET Test Automation Recipes', 'PublisherG', '978-1-59059-663-0', 408, 2006),
	    bookRepository.save(new Book(null, '10 LED Projects for Geeks', 'PublisherH', '978-1-59327-825-0', 240, 2018),
	    bookRepository.save(new Book(null, '101 Design Ingredients to Solve Big Tech Problems', 'PublisherI', '978-1-93778-532-1', 298, 2013),
	    bookRepository.save(new Book(null, '101 Excel 2013 Tips, Tricks and Timesavers', 'PublisherJ', '978-1-118-64218-4', 312, 2013),
		bookRepository.save(new Book(null, '101 UX Principles', 'PublisherK', '978-1-78883-736-1', 414, 2018),
	    bookRepository.save(new Book(null, '101 Windows Phone 7 Apps', 'PublisherL', '978-0-672-33552-5', 1152, 2011),
	    bookRepository.save(new Book(null, '20 Easy Raspberry Pi Projects', 'PublisherM', '978-1-59327-843-4', 288, 2018),
	    bookRepository.save(new Book(null, '20 Recipes for Programming MVC3', 'PublisherN', '978-1-4493-0986-2', 122, 2011),
				(15, '20 Recipes for Programming PhoneGap', 'PublisherO', '978-1-4493-1954-0', 78, 2012),
				(16, '21 Recipes for Mining Twitter', 'PublisherP', '978-1-4493-0316-7', 72, 2011),
				(17, '21st Century C', 'PublisherQ', '978-1-4493-2714-9', 296, 2012),
				(18, '21st Century C, 2nd Edition', 'PublisherR', '978-1-49190-389-6', 408, 2014),
				(19, '21st Century Robot', 'PublisherS', '978-1-44933-821-3', 278, 2014),
				(20, '25 Recipes for Getting Started with R', 'PublisherT', '978-1-4493-0323-5', 50, 2011);
		

-----------------------------------------------------------------------------------------------------------------------------------------
git commands
 1)Delete a folder from github 
        git rm -r foldername
        git commit -m "done"
        git push origin


------------------------------------------------------------------------------------------------------------------------------------------



DAY 2-----------------------------------------------------------------

Actuator dependency for enabling 13 endpoints(application.properties) eg:actuator  actuator/healt, actuator/env...

profile -> default:
application.properties

profile -> dev:
application-dev.properties1

profile -> prod:
application-prod.properties

spring.profiles.active=dev
spring.profiles.active=prod

Codebase(jar)-  creted a JAR , application is in running state
so if requriments comes and DBA says that u should change max-pool-size 10 to 30 for better performance

so rather than changing the codebase everytime 
1) Configuration Service -Supporting capabilites(spring cloud config)
go for centralised repository github (versioned)


Spring cloud config:
- Spring cloud config server
- Spring cloud config client (microservice- for eg -> storeapp)

1) client(storespp) will intertact with config server through the URL we passed to Storeapp in properties file
    i.e it binds to the Config server through the URL of config server


--------------------------------------------------------------------------------------------------------------

Config server-

 1) starter -> config server
 2) annotate -> @EnbaleConfigServer to make Project as Config server 
 3) server.port = 8888

 http://localhost:8888/book-service/prod/main (to check the config server is getting the property file or not)


---------------------------------------------------------------------------------------------

DAY 3

Cloud - AutoScaling


Dyanmic IP Address
-Services are  running

Dynamic ports
-changing ports

- Due to frequently of changing dynamic IP/ports  we can't locate the restService hence service to service calls will fail(we dont know where the req services is available)

------------------------------------------------------------------------------------------------------------

So to Overcome these problems there is pattern called
 -Service registrey

Impenetation of the patter in Netfix Eureka Service Registry


DAY 4-----------------------------------------------------------------------------------------------------------------------------------
http://product-service/products
http://product-service/products/1


@EnableEurekaClient or @EnableDiscoveryClient -> fro self registration & deregistration


--------------------------------------------------------------------------


In Spring rest to do service to service call: which API we use ?
   -RestTemplate (is the HTTP Cilent implementation)
   -RestTemplate will make call to other service / make a sysnchrnous call
   
   -RestTemplate Requires IP / PORT  

but REST TEMPLATE req only 1 IP/PORT but we r geetinh 3 in the metadata

To resolve this problm there is a patter called Client Side Discovery

------------------------------------------------------------------------------

Client Side Load Balacing: (Ribbon)

Client side discovery pattern is saying (implementation Netflix Ribbon)
  - so Make HTTP client Registry Aware HTTP client so whn now we give the IP/PORT 
   
  -Adding an extra capability to the HTTP Client so now it will look up into the registry , gte the
   meta data 
  - now it will use alogorithm call ROUND ROBBIN ALGO 
  - using this ALGO out of 3 it will pickup 1 IP/PORT
  -thn it will hit to port

service to service call
 -REST TEMPLATE (HTTP CLIENT)

Spirng Cloud Ribbon:
 -@LoadBalanced (whre we create obj of restTemplate on the top of it thy add and extra capabilty to it and hence no more http client but Registry Aware HTTP client )

 
--------------------------------------------------------------------------------------------------

DAY 5 - 

to reduce the boiler plate code of microservices using restTemplate in ProductClientController class of Ribbon 
Netfilx comes-up with a concept called "OpenFiegn"->It provides  high level of abstraction for rest based service call .Using feign we write declrative Rest servies interface and the interface impl will be auto provided by spring at run time.
 
Client side load balancing with Feign

-------------------------------------------------------------------------------------------









